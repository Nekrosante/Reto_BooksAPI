{
	"info": {
		"_postman_id": "112fc3bc-be47-4236-8f57-c63a08108a23",
		"name": "BooksAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21211171"
	},
	"item": [
		{
			"name": "Succesful Read Books",
			"item": [
				{
					"name": "Api Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and JSON body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if body message contains STATUS and value is OK\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.json()).to.have.keys(\"status\");\r",
									"    pm.expect(jsonData.status).to.eql(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if response has format JSON\", function() {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if NO shows error message\", function () {\r",
									"    pm.expect(pm.response.json()).to.not.have.keys(\"error\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}//books",
							"host": [
								"{{URL}}"
							],
							"path": [
								"",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if response has format JSON and is Valid\", function() {\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.all.keys(\"name\", \"id\", \"author\", \"type\",\"price\", \"current-stock\",\"available\");\r",
									"});\r",
									"pm.test(\"Check if filter ID successful\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var id = parseInt(pm.variables.get('bookId'), 10);\r",
									"    pm.expect(jsonData.id).to.eql(id);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/books/{{bookId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Unsuccesful Read Books",
			"item": [
				{
					"name": "Api Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if response has format JSON\", function() {\r",
									"    pm.response.to.be.json;\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if NO shows error message\", function () {\r",
									"    pm.expect(pm.response.json()).to.not.have.keys(\"error\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}//books",
							"host": [
								"{{URL}}"
							],
							"path": [
								"",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error Get a single book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Check if it shows error message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.keys(\"error\");\r",
									"});\r",
									"pm.test(\"Body matches book Id\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"NbookId\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/books/{{NbookId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"books",
								"{{NbookId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Succesful Creation",
			"item": [
				{
					"name": "Api Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and JSON body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if body message contains STATUS and value is OK\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.json()).to.have.keys(\"status\");\r",
									"    pm.expect(jsonData.status).to.eql(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dynamic Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is CREATED\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Check if json has an access key\", function() {\r",
									"    pm.response.to.have.jsonBody(\"accessToken\");\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"TOKEN\", `${json.accessToken}`);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"clientName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"emailClient\", pm.variables.replaceIn('{{$randomEmail}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\":\"{{clientName}}\",\r\n   \"clientEmail\":\"{{emailClient}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api-clients/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Dynamic Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the order has been created and generated orderId\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"orderId\", `${json.orderId}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\":\"{{bookId}}\",\r\n  \"customerName\":\"{{clientName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/orders",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Order Single",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the bookId corresponds to the orderId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.bookId).to.eql(parseInt(pm.variables.get('bookId'), 10));\r",
									"});\r",
									"pm.test(\"Check if the customerName corresponds to the nameClient\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.customerName).to.eql(pm.environment.get(\"clientName\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Order All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the bookId corresponds to the orderId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var data = jsonData.find(x => x.id == pm.variables.get('orderId'))\r",
									"    pm.expect(data.bookId).to.eql(parseInt(pm.variables.get('bookId'), 10));\r",
									"});\r",
									"pm.test(\"Check if the customerName corresponds to the nameClient\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var data = jsonData.find(x => x.id == pm.variables.get('orderId'))\r",
									"    pm.expect(data.customerName).to.eql(pm.environment.get(\"clientName\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Unsuccesful Creation",
			"item": [
				{
					"name": "Api Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and JSON body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if body message contains STATUS and value is OK\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.json()).to.have.keys(\"status\");\r",
									"    pm.expect(jsonData.status).to.eql(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dynamic Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is CREATED\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Check if json has an access key\", function() {\r",
									"    pm.response.to.have.jsonBody(\"accessToken\");\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"TOKEN\", `${json.accessToken}`);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"clientName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"emailClient\", pm.variables.replaceIn('{{$randomEmail}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\":\"{{clientName}}\",\r\n   \"clientEmail\":\"{{emailClient}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api-clients/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Dynamic Order Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400,404]);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the error message appears\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.keys(\"error\");\r",
									"})\r",
									"pm.test(\"Check if the text of the message is as expected\", function () {\r",
									"    pm.expect(pm.response.text()).to.include.oneOf([\"This book is not in stock. Try again later.\",\"Invalid or missing bookId.\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"NbookId\", pm.variables.replaceIn('{{$randomBankAccount}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\":2,\r\n  \"customerName\":\"{{clientName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/orders",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check non-Creation Order Single",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if it shows error message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.keys(\"error\");\r",
									"});\r",
									"pm.test(\"Check if it presents correct orderId\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"orderId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check non-Creation Order All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and JSON body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if it body EMPTY\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Successful Update",
			"item": [
				{
					"name": "Api Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and JSON body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if body message contains STATUS and value is OK\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.json()).to.have.keys(\"status\");\r",
									"    pm.expect(jsonData.status).to.eql(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dynamic Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is CREATED\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Check if json has an access key\", function() {\r",
									"    pm.response.to.have.jsonBody(\"accessToken\");\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"TOKEN\", `${json.accessToken}`);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"clientName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"emailClient\", pm.variables.replaceIn('{{$randomEmail}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\":\"{{clientName}}\",\r\n   \"clientEmail\":\"{{emailClient}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api-clients/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Dynamic Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the order has been created and generated orderId\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"orderId\", `${json.orderId}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\":\"{{bookId}}\",\r\n  \"customerName\":\"{{clientName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/orders",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the bookId corresponds to the orderId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.bookId).to.eql(parseInt(pm.variables.get('bookId'), 10));\r",
									"});\r",
									"pm.test(\"Check if the customerName corresponds to the nameClient\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.customerName).to.eql(pm.environment.get(\"clientName\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"clientName\", pm.variables.replaceIn('{{$randomLastName}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"customerName\": \"{{clientName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}//orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"",
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Update Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the bookId corresponds to the orderId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.bookId).to.eql(parseInt(pm.variables.get('bookId'), 10));\r",
									"});\r",
									"pm.test(\"Check if the customerName corresponds to the NameClient update\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.customerName).to.eql(pm.environment.get(\"clientName\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Unsuccessful Update",
			"item": [
				{
					"name": "Api Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and JSON body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if body message contains STATUS and value is OK\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.json()).to.have.keys(\"status\");\r",
									"    pm.expect(jsonData.status).to.eql(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dynamic Authentication II",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is CREATED\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Check if json has an access key\", function() {\r",
									"    pm.response.to.have.jsonBody(\"accessToken\");\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"TOKEN2\", `${json.accessToken}`);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"clientName2\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"emailClient2\", pm.variables.replaceIn('{{$randomEmail}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\":\"{{clientName2}}\",\r\n   \"clientEmail\":\"{{emailClient2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api-clients/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Dynamic Order II",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the order has been created and generated orderId\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"orderId2\", `${json.orderId}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\":\"{{bookId}}\",\r\n  \"customerName\":\"{{clientName2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/orders",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Order II",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the bookId corresponds to the orderId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.bookId).to.eql(parseInt(pm.variables.get('bookId'), 10));\r",
									"});\r",
									"pm.test(\"Check if the customerName corresponds to the nameClient\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.customerName).to.eql(pm.environment.get(\"clientName2\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId2}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order II",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"clientNameNU\", pm.environment.get(\"clientName2\"));\r",
									"pm.environment.set(\"clientName2\", pm.variables.replaceIn('{{$randomLastName}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN2}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"customerName\": \"{{clientName2}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}//orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"",
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check non-Update Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the bookId corresponds to the orderId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.bookId).to.eql(parseInt(pm.variables.get('bookId'), 10));\r",
									"});\r",
									"pm.test(\"Check if the NameClient has not been updated\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.customerName).to.eql(pm.environment.get(\"clientNameNU\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId2}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Successful Delete",
			"item": [
				{
					"name": "Api Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and JSON body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if body message contains STATUS and value is OK\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.json()).to.have.keys(\"status\");\r",
									"    pm.expect(jsonData.status).to.eql(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dynamic Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is CREATED\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Check if json has an access key\", function() {\r",
									"    pm.response.to.have.jsonBody(\"accessToken\");\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"TOKEN\", `${json.accessToken}`);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"clientName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"emailClient\", pm.variables.replaceIn('{{$randomEmail}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\":\"{{clientName}}\",\r\n   \"clientEmail\":\"{{emailClient}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api-clients/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Dynamic Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the order has been created and generated orderId\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"orderId\", `${json.orderId}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\":\"{{bookId}}\",\r\n  \"customerName\":\"{{clientName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/orders",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the bookId corresponds to the orderId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.bookId).to.eql(parseInt(pm.variables.get('bookId'), 10));\r",
									"});\r",
									"pm.test(\"Check if the customerName corresponds to the nameClient\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.customerName).to.eql(pm.environment.get(\"clientName\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Delete Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if it shows error message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.keys(\"error\");\r",
									"});\r",
									"pm.test(\"Check if it presents correct orderId\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"orderId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Unsuccessful Delete",
			"item": [
				{
					"name": "Api Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and JSON body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if body message contains STATUS and value is OK\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.json()).to.have.keys(\"status\");\r",
									"    pm.expect(jsonData.status).to.eql(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Dynamic Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is CREATED\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.test(\"Check if json has an access key\", function() {\r",
									"    pm.response.to.have.jsonBody(\"accessToken\");\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"TOKEN\", `${json.accessToken}`);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"clientName\", pm.variables.replaceIn('{{$randomFirstName}}'));\r",
									"pm.environment.set(\"emailClient\", pm.variables.replaceIn('{{$randomEmail}}'));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\":\"{{clientName}}\",\r\n   \"clientEmail\":\"{{emailClient}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api-clients/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Dynamic Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the order has been created and generated orderId\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"orderId\", `${json.orderId}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\":\"{{bookId}}\",\r\n  \"customerName\":\"{{clientName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/orders",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the bookId corresponds to the orderId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.bookId).to.eql(parseInt(pm.variables.get('bookId'), 10));\r",
									"});\r",
									"pm.test(\"Check if the customerName corresponds to the nameClient\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.customerName).to.eql(pm.environment.get(\"clientName\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Check if it shows error message\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.keys(\"error\");\r",
									"});\r",
									"pm.test(\"Body matches orderId\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"orderId2\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId2}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Delete Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the orderId\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"orderId\"));\r",
									"});\r",
									"pm.test(\"Check if the customerName\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.customerName).to.eql(pm.environment.get(\"clientName\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "All Endpoints",
			"item": [
				{
					"name": "Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 and JSON body\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Check if body message contains STATUS and value is OK\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(pm.response.json()).to.have.keys(\"status\");\r",
									"    pm.expect(jsonData.status).to.eql(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/status",
							"host": [
								"{{URL}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if json has an access key\", function() {\r",
									"    pm.response.to.have.jsonBody(\"accessToken\");\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"TOKEN\", `${json.accessToken}`);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientName\": \"Betha\",\r\n    \"clientEmail\": \"Betha@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api-clients/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api-clients",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "List of books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if response has format JSON\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}//books",
							"host": [
								"{{URL}}"
							],
							"path": [
								"",
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if response has format JSON\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if filter ID successful\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var id = parseInt(pm.variables.get('bookId'), 10);\r",
									"    pm.expect(jsonData.id).to.eql(id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/books/{{bookId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if response must be valid and have a body\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if order created and generar id orden\", function() {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"    var json = JSON.parse(responseBody);\r",
									"    pm.environment.set(\"orderId\", `${json.orderId}`);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookId\": {{bookId}},\r\n  \"customerName\": \"Thanos\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/orders",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check if response has format JSON\", function() {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"pm.test(\"Check if the bookId corresponds to the orderId\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.bookId).to.eql(parseInt(pm.variables.get('bookId'), 10));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all orders",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"customerName\": \"Nekros2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}//orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"",
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/orders/{{orderId}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"orders",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}